#!/bin/bash

source set-env.sh

set -e
set -o pipefail

set -x

orig_dir=$( pwd )

echo "+ Updating apt-get sources..."
apt-get -y update

echo "+ Installing build dependencies..."
# install build deps
apt-get -y install g++ \
gcc \
curl \
autoconf

BUILD_DIR="/tmp/build"
rm -rf /app
rm -rf ${BUILD_DIR}
mkdir -p ${BUILD_DIR}
pushd ${BUILD_DIR}

if [[ -n "$NGINX_VERSION" ]]; then
    echo "+ Fetching Nginx ..."
    mkdir -p /app/local
    curl -L "https://${S3_BUCKET}.s3.amazonaws.com/nginx-${NGINX_VERSION}.tar.gz" -o - | tar xz
else
    echo "- Skipping Nginx"
fi

if [[ -n "$PCRE_VERSION" ]]; then
    echo "+ Fetching PCRE..."
    pushd nginx-$NGINX_VERSION/contrib
    curl -L "https://${S3_BUCKET}.s3.amazonaws.com/pcre-${PCRE_VERSION}.tar.gz" -o - | tar xz
    popd
else
    echo "- Skipping PCRE"
fi

if [[ -n "$ZLIB_VERSION" ]]; then
    echo "+ Fetching zlib sources..."
    pushd nginx-$NGINX_VERSION/contrib
    curl -L "https://${S3_BUCKET}.s3.amazonaws.com/zlib-${ZLIB_VERSION}.tar.gz" -o - | tar xz
    popd
else
    echo "- Skipping zlib (or already done)"
fi

# if [[ -n "$OPENSSL_VERSION" ]]; then
#     echo "+ Fetching openssl sources..."
#     mkdir -p /app/local
#     curl -L "http://s3.amazonaws.com/${S3_BUCKET}/openssl_${OPENSSL_VERSION}.tar.gz" -o - | tar xz
#     OPENSSL_SRC_DIR="${BUILD_DIR}/openssl_${OPENSSL_VERSION}"
#     pushd $openssl_${OPENSSL_VERSION}
#     set +o pipefail
#     make clean || true
#     set -o pipefail
#     ./config --prefix=/app/local --openssldir=/app/local/openssl no-shared no-threads no-ssl2
#     make install
#     popd
# else
#     echo "- Skipping openssl"
# fi

if [[ -n "$NGINX_VERSION" ]]; then
    echo "+ Building Nginx ..."
    pushd nginx-$NGINX_VERSION
    ./configure --prefix=/app/vendor/nginx \
    --with-pcre=contrib/pcre-${PCRE_VERSION} \
    --with-http_gzip_static_module \
    --with-http_realip_module \
    --with-http_stub_status_module \
    --with-http_v2_module \
    --with-zlib=contrib/zlib-${ZLIB_VERSION} \
    --with-cc-opt="-static -static-libgcc " \
    --with-ld-opt="-static -L/app/local/lib"

    make install
    popd
fi

pushd /app/
echo "+ Stripping binaries..."
set +e
find local/bin local/lib vendor -regex ".*\.\(so\|so\.([0-9]\.?)+\)" -exec strip {} \;
find local/bin -exec strip {} \;
find vendor -regex "[^/]+/.*\(s\)?bin/[^.]*" -exec strip {} \;
set -e
popd

echo "+ Packaging NGINX..."
pushd /app/vendor/nginx
tar czf $orig_dir/nginx-${NGINX_VERSION}-vr${BUILD_SUFFIX}.tar.gz *
popd

popd

echo "+ Binaries are packaged in $orig_dir/*.tar.gz. Upload to s3 bucket of your choice."
echo "+ Done!"
