#!/bin/bash

set -e
set -o pipefail
shopt -s dotglob

basedir="$( cd -P "$( dirname "$0" )" && pwd )"
source "$basedir/../conf/buildpack.conf"
source $basedir/common.sh

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

BUILD_SUFFIX=".v19"
BUILD_DIR="$1"
CACHE_DIR="$2"

cd "$BUILD_DIR"
mkdir -p "$CACHE_DIR/package"

function fetch_engine_package() {
    local engine="$1"
    local version="$2"
    local location="$3"

    fetch_package "${engine}-${version}" "$location"
}

function fetch_package() {
    local package="$1"
    local location="$2"

    mkdir -p "$location"

    local checksum_url="http://${S3_BUCKET}.s3.amazonaws.com/package/${package}.md5"
    local package_url="http://${S3_BUCKET}.s3.amazonaws.com/package/${package}.tgz"
    local checksum=$(curl "$checksum_url" 2> /dev/null)
    local cache_checksum=

    if [ -f "$CACHE_DIR/package/${package}.md5" ]; then
        local cache_checksum=$(cat "$CACHE_DIR/package/${package}.md5")
    fi

    mkdir -p "$CACHE_DIR/package/$(dirname "$package")"

    if [ "$cache_checksum" != "$checksum" ]; then
        curl "$package_url" -L -s > "$CACHE_DIR/package/${package}.tgz"
        echo "$checksum" > "$CACHE_DIR/package/${package}.md5"
    else
        echo "Checksums match. Fetching from cache."
    fi

    tar xzf "$CACHE_DIR/package/${package}.tgz" -C "$location"
}

function log_error() {
    local c='s/^/ !     /'
    case $(uname) in
        Darwin) echo "$*" | sed -l "$c";;
        *)      echo "$*" | sed -u "$c";;
    esac
}

function indent() {
    local c='s/^/       /'
    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}

function install_composer_deps() {
    local cwd=$(pwd)
    local target="$1"

    if [ ! -f "$target/composer.json" ]; then
        return 0
    fi

    if [ ! -f "$target/composer.lock" ]; then
        log_error "Lockfile required. Please check it in."
        return 1
    fi

    export COMPOSER_CACHE_DIR=$CACHE_DIR/composer
    mkdir -p $COMPOSER_CACHE_DIR
    mkdir -p "$target/vendor/composer/bin"

    local checksum=$(curl --silent "http://${S3_BUCKET}.s3.amazonaws.com/composer/composer.phar.md5")

    status "Vendoring Composer"
    if [ ! -f "$CACHE_DIR/composer.phar.md5" ] || [ "$(cat $CACHE_DIR/composer.phar.md5)" != "$checksum" ]; then
        echo "Updating Composer" | indent
        curl --silent "http://${S3_BUCKET}.s3.amazonaws.com/composer/composer.phar" > "$CACHE_DIR/composer.phar" | indent
        chmod a+x "$CACHE_DIR/composer.phar"
        echo "$checksum" > $CACHE_DIR/composer.phar.md5
    fi

    cp "$CACHE_DIR/composer.phar" "$target/vendor/composer/bin/"

    local required_extensions=$(jq --raw-output '.require | keys | .[]' < "$BUILD_DIR/composer.json" | grep '^ext-' | sed 's/^ext-//')
    if [ -n "$required_extensions" ]; then
        status "Bundling additional extensions $required_extensions"
        for ext in $required_extensions; do
            echo "$ext" | indent
            # TODO: Find a better way to ignore extensions which were not found in S3
            fetch_package "ext/$(php_api_version)/php-${ext}" "/app/vendor/php" 2>/dev/null || true | indent
        done
    fi

    php "vendor/composer/bin/composer.phar" self-update

    status "Installing application dependencies with Composer"
    {
        cd "$target"
        php "vendor/composer/bin/composer.phar" install \
            --prefer-dist \
            --optimize-autoloader \
            --no-interaction \
            --no-dev
        cd "$cwd"
    } | indent
}

function install_node_deps() {
    local cwd=$(pwd)
    local target="$1"

    if [ ! -f "$target/package.json" ]; then
        return 0
    fi

    status "NODE (package.json) app detected"

    source ${basedir}/compile_node $BUILD_DIR $CACHE_DIR

    local node_path='vendor/node'

    # Symlink node to /app/vendor/node so node and its modules are runnable.

    ln -s ${BUILD_DIR}/${node_path}/ /app/${node_path}
    ln -s ${BUILD_DIR}/node_modules /app/node_modules

    echo "Node " `node -v` | indent
}

export_env_dir() {
    env_dir=$1
    blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LD_LIBRARY_PATH)$'}
    if [ -d "$env_dir" ]; then
        for e in $(ls $env_dir); do
            echo "$e" | grep -qvE "$blacklist_regex" &&
            export "$e=$(cat $env_dir/$e)"
            :
        done
    fi
}

function mktmpdir() {
    dir=$(mktemp -t php-$1-XXXX)
    rm -rf $dir
    mkdir -p $dir
    echo $dir
}

function php_api_version() {
    basename "$(php-config --extension-dir)" | tr '-' ' ' | cut -f 5 -d ' '
}

function package_document_root() {
    jq --raw-output '.extra.heroku["document-root"] // ""' < "$BUILD_DIR/composer.json"
}

function package_index_file() {
    jq --raw-output '.extra.heroku["index-document"] // "index.php"' < "$BUILD_DIR/composer.json"
}

function package_framework() {
    jq --raw-output '.extra.heroku.framework // ""' < "$BUILD_DIR/composer.json"
}

function package_nginx_version() {
    jq --raw-output ".extra.heroku.engines.nginx // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_php_version() {
    jq --raw-output ".extra.heroku.engines.php // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_php_config() {
    jq --raw-output '.extra.heroku["php-config"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_php_includes() {
    jq --raw-output '.extra.heroku["php-includes"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_nginx_includes() {
    jq --raw-output '.extra.heroku["nginx-includes"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_log_files() {
    jq --raw-output '.extra.heroku["log-files"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_compile_cmd() {
    jq --raw-output '.extra.heroku["compile"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_boot_cmd() {
    jq --raw-output '.extra.heroku["boot"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_newrelic_enabled() {
    local val=$(jq --raw-output '.extra.heroku["newrelic"] // false' < "$BUILD_DIR/composer.json")

    if [ "$val" = "true" ]; then
        return 0
    else
        return 1
    fi
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function check_md5() {
  SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
  TARGET="$1"
  SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
  OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
  ! [ "$SUM" = "$OUTPUT" ]
}

function download_url() {
  TARGET_URL="$1"
  curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}

BUNDLE_DIR="${CACHE_DIR}/bundles"
export COMPOSER_HOME="${CACHE_DIR}/.composer"

export_env_dir "$3"

# START CONFIG
S3_URL="http://${S3_BUCKET}.s3.amazonaws.com"
NGINX_VERSION=1.14.2
PHP_VERSION=5.6.40
NEWRELIC_VERSION=8.7.0.242
MEMCACHED_VERSION=1.5.16
REPO_URL=${S3_URL}

DOCUMENT_ROOT=
INDEX_DOCUMENT="index.php"
PHP_EXTRA_CONFIG=
PHP_INCLUDES=
COMPILE_CMD=
BOOT_CMD=
NGINX_INCLUDES=
LOG_FILES=( "/app/vendor/nginx/logs/access.log" "/app/vendor/nginx/logs/error.log" )
# END CONFIG

MANIFEST_FILE="manifest.md5sum"
NGINX_FILE="nginx-${NGINX_VERSION}-vr${BUILD_SUFFIX}.tar.gz"
PHP_LIBS_FILE="php-${PHP_VERSION}-libs-vr${BUILD_SUFFIX}.tar.gz"
PHP_FILE="php-${PHP_VERSION}-with-fpm-vr${BUILD_SUFFIX}.tar.gz"
MEMCACHED_FILE="memcached-server-${MEMCACHED_VERSION}-vr${BUILD_SUFFIX}.tar.gz"

MANIFEST_URL="${REPO_URL}/${MANIFEST_FILE}"
NGINX_URL="${REPO_URL}/${NGINX_FILE}"
PHP_URL="${REPO_URL}/${PHP_FILE}"
PHP_LIBS_URL="${REPO_URL}/${PHP_LIBS_FILE}"
MEMCACHED_URL="${REPO_URL}/${MEMCACHED_FILE}"
COMPOSER_URL="http://getcomposer.org/composer.phar"

mkdir -p $BUILD_DIR $CACHE_DIR ${BUNDLE_DIR} ${BUILD_DIR}/local ${COMPOSER_HOME} ${BUILD_DIR}/.profile.d $BUILD_DIR/vendor

[ ! -d "$HOME/bin" ] && mkdir -p "$HOME/bin"
# Download jq binary for JSON processing
export PATH="$HOME/bin:$PATH"
curl "${S3_BUCKET}.s3.amazonaws.com/bin/jq" -L -s -o - > "$HOME/bin/jq"
chmod +x "$HOME/bin/jq"
cp "$HOME/bin/jq" ${BUILD_DIR}/bin/jq

# Read config variables from composer.json if it exists
if [ -f "$BUILD_DIR/composer.json" ]; then
    DOCUMENT_ROOT=$(package_document_root)
    INDEX_DOCUMENT=$(package_index_file)
    PHP_EXTRA_CONFIG=$(package_php_config)
    PHP_INCLUDES=$(package_php_includes)
    COMPILE_CMD=$(package_compile_cmd)
    BOOT_CMD=$(package_boot_cmd)
    NGINX_INCLUDES=$(package_nginx_includes)
    USER_LOG_FILES=$(package_log_files)
fi

#################### INSTALL STUFF

pushd ${BUNDLE_DIR} > /dev/null

if [ -n "`find . -type f -atime +30`" ]
then
	echo "-----> Pruning Unused Cached Bundles"
	find . -type f -atime +30 -delete | indent
fi

echo "-----> Fetching Manifest"
echo ${MANIFEST_URL} | indent
download_url ${MANIFEST_URL}



# Nginx
echo "-----> Installing Nginx"
if [ -f "${NGINX_FILE}" ]
then
	# check manifest
	if check_md5 "${NGINX_FILE}"
	then
		echo "Bundling Nginx v${NGINX_VERSION}" | indent
		echo ${NGINX_URL} | indent
		download_url ${NGINX_URL}
	else
		echo "Using cached Nginx v${NGINX_VERSION}" | indent
	fi
else
	# fetch
	echo "Bundling Nginx v${NGINX_VERSION}" | indent
	echo ${NGINX_URL} | indent
	download_url ${NGINX_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/nginx
tar xzf ${NGINX_FILE} -C ${BUILD_DIR}/vendor/nginx

# PHP
echo "-----> Installing PHP"
if [ -f "$PHP_FILE" ]
then
	if check_md5 "${PHP_FILE}"
	then
		echo "Bundling PHP v${PHP_VERSION}" | indent
		echo ${PHP_URL} | indent
		download_url ${PHP_URL}
	else
		echo "Using cached PHP v${PHP_VERSION}" | indent
	fi
else
	echo "Bundling PHP v${PHP_VERSION}" | indent
	echo ${PHP_URL} | indent
	download_url ${PHP_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/php/etc/conf.d
tar xzf ${PHP_FILE} -C ${BUILD_DIR}/vendor/php
export PATH="${PATH}:/app/vendor/php/bin"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/app/local/lib"

# PHP LIBS
echo "-----> Installing PHP LIBS"
if [ -f "$PHP_LIBS_FILE" ]
then
	if check_md5 "${PHP_LIBS_FILE}"
	then
		echo "Bundling PHP LIBS v${PHP_VERSION}" | indent
		echo ${PHP_LIBS_URL} | indent
		download_url ${PHP_LIBS_URL}
	else
		echo "Using cached PHP LIBS v${PHP_VERSION}" | indent
	fi
else
	echo "Bundling PHP LIBS v${PHP_VERSION}" | indent
	echo ${PHP_LIBS_URL} | indent
	download_url ${PHP_LIBS_URL}
fi

mkdir -p ${BUILD_DIR}/local
tar xzf ${PHP_LIBS_FILE} -C ${BUILD_DIR}/local


echo "-----> Installing Memcached"
if [ -f "$MEMCACHED_FILE" ]
then
	if check_md5 "${MEMCACHED_FILE}"
	then
		echo "Bundling Memcached v${MEMCACHED_VERSION}" | indent
		echo ${MEMCACHED_URL} | indent
		download_url ${MEMCACHED_URL}
	else
		echo "Using cached Memcached v${MEMCACHED_VERSION}" | indent
	fi
else
	echo "Bundling Memcached v${MEMCACHED_VERSION}" | indent
	echo ${MEMCACHED_URL} | indent
	download_url ${MEMCACHED_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/memcached
tar xzf ${MEMCACHED_FILE} -C ${BUILD_DIR}/vendor/memcached
export PATH="${PATH}:/app/vendor/memcached/bin"

popd > /dev/null
#######################################


test ! -d ".profile.d" && mkdir -p .profile.d || true

cat > ".profile.d/php.sh" <<SH
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/app/bin:/app/vendor/nginx/sbin:/app/vendor/php/sbin:/app/vendor/php/bin:/app/vendor/bin:/app/vendor/memcached/bin:\$PATH
export LD_LIBRARY_PATH=/app/local/lib:\$LD_LIBRARY_PATH
export HEROKU_BUILD_TIME=$(date +%Y%m%d%H%M%S)
SH

source ".profile.d/php.sh"

mkdir -p "conf"
cp "$basedir/../conf/nginx/base.conf.erb" "${BUILD_DIR}/conf/nginx.conf.erb"
cp "$basedir/../conf/nginx/site.conf.erb" "${BUILD_DIR}/conf/site.conf.erb"
cp "$basedir/../conf/php/php-fpm.conf" "${BUILD_DIR}/vendor/php/etc/php-fpm.conf"
cp "$basedir/../conf/php/php.ini" "${BUILD_DIR}/vendor/php/php.ini"
cp -r -f "$basedir/../conf/etc.d" "${BUILD_DIR}/vendor/php/etc.d"

#pear config-set php_ini /app/vendor/php/etc/php.ini &> /dev/null

for conf in $PHP_EXTRA_CONFIG; do
    echo "$conf" >> "${BUILD_DIR}/vendor/php/php.ini"
done

for include in $PHP_INCLUDES; do
    cp "$BUILD_DIR/$include" "${BUILD_DIR}/vendor/php/etc/conf.d/"
done

install_node_deps "$BUILD_DIR"
#install_composer_deps "$BUILD_DIR"

if [ -n "$COMPILE_CMD" ]; then
    status "Running compile commands"
    while read -r cmd; do
        echo "Running '$cmd'" | indent
        eval $cmd             | indent
    done <<< "$COMPILE_CMD"
fi

if [ -n "$BOOT_CMD" ]; then
    status "Preparing run commands"
    while read -r cmd; do
        BOOT_CMDS="$BOOT_CMDS$cmd;"
    done <<< "$BOOT_CMD"
fi

mkdir -p "bin"
cat > bin/run <<SH
#!/usr/bin/env bash

pmsgr=/tmp/pmsgr
rm -f \$pmsgr
mkfifo \$pmsgr
mesg y
export NEW_RELIC_LICENSE_KEY=\$(grep newrelic_license_key /settings.yaml | awk '{print \$2}')

for var in \`env | cut -f1 -d=\`; do
    echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

export DOCUMENT_ROOT="$DOCUMENT_ROOT"
export INDEX_DOCUMENT="$INDEX_DOCUMENT"
export NGINX_INCLUDES="$NGINX_INCLUDES"
$BOOT_CMDS

if [ -n "\$NEW_RELIC_LICENSE_KEY" ] && [ -n "\$NEW_RELIC_APPNAME" ]; then
    echo "newrelic.license=\"\$NEW_RELIC_LICENSE_KEY\"" >> /app/vendor/php/etc.d/newrelic.ini
    echo "newrelic.appname=\"\$NEW_RELIC_APPNAME\"" >> /app/vendor/php/etc.d/newrelic.ini
fi

erb /app/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf
erb /app/conf/site.conf.erb > /app/vendor/nginx/conf/site.conf

echo "Starting FPM"
(
    exec /app/vendor/php/sbin/php-fpm -p "/app/vendor/php"
    $pmsgr < "php-fpm"
)&
echo "Starting Nginx"
(
    exec /app/vendor/nginx/sbin/nginx -p "/app/vendor/nginx" -c /app/vendor/nginx/conf/nginx.conf
    \$pmsgr < "nginx"
)&
echo "Starting memcached"
(
    exec /app/vendor/memcached/bin/memcached -u nobody -s /tmp/memcache.socket -a 0777 -m 64
    \$pmsgr < "memcached"
)&

if [ -n "\$NEW_RELIC_LICENSE_KEY" ] && [ -n "\$NEW_RELIC_APPNAME" ]; then
    echo "Starting New Relic daemon"
    (
        rm -f /tmp/.newrelic.socket
        touch /tmp/newrelic.log
        exec /app/vendor/php/newrelic/newrelic-daemon.x64 -P /tmp/.newrelic.socket -f -d error -l /tmp/newrelic.log
        \$pmsgr < "newrelic"
    )&

    (
     tail -f /tmp/newrelic.log
    )&

fi
echo "All done"

read exitproc <\$pmsgr
echo "Boot failed: \$exitproc"
exit 1
SH

chmod +x "bin/run"
